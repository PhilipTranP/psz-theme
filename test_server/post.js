module.exports = function(slug) {
  return { "posts": [{
    "id": 4,
    "uuid": "e4d5b9b6-2a42-4bc1-83b8-805ac0effd35",
    "title": "New America",
    "slug": slug,
    "markdown": "New America is a vibrant think-tank that is very much interested in technology - and as such, deserves the very best in interactive web tools. I currently lead coding efforts and contribute to design and UX to make this happen.\n\nThe beating heart of my work is [Atlas](http://atlas.newamerica.org), a new data visualization and presentation tool. It delivers the Education Policy Program's carefully collected and synthesized data to policymakers, other analysts and the general public in a beautiful, clear, highly interactive format. Its back-end allows policy analysts to create custom interactive maps and charts without coding.\n\nI am using the core codebase from Atlas to develop the [2014 annual report](http://2014.newamerica.org), [the New America intranet](http://my.newamerica.org), while also doing some consultation and front-end bug fixes on the organization's [main site](https://www.newamerica.org/) on the side. These are busy, exciting, fun times with a whole lot of learning.\n\n# Technology\n\nAtlas is a native web/single-page application powered by Express.js. It is very close to becoming a fully isomorphic application, with Backbone.js data models and React.js components shared by the client and the server.\n\nData visualization and interactive mapping components are handled by the very capable d3.js and Leaflet.js. We've figured out some [nice ways](/blog/scaling-tricks-for-geo) to integrate these libraries into our client-side codebase.\n\n# History\n\nThe codebase has come a long way, included a whole lot of fun, learning and intensity. Here are some of the highlights:\n\n## November 2014\n\nWe brainstormed on the scope of the platform and made decisions on the technology stack used for prototyping. Ruby on Rails 4.2, Backbone.js and Marionette.js 2.3 are the winners.\n\n## December 2014\n\nThe home page and the projects listings page is built out as a single-page app using Marionette.js.\n\nAn initial [heatmap](http://atlas.newamerica.org/mapping-college-readiness) and [pindrop](http://atlas.newamerica.org/tech-early-literacy) map templates are built out using vanilla JavaScript modules. The following starts showing up all over the place:\n\n```\nvar Atlas.SomeMappingModule = function() {\n\n    var self = {};\n\n    // Add event emitting, handling and listening capabilities.\n    _.extend(self, Backbone.Events);\n\n    var privateMethod = function() {};\n\n    self.listenTo(babyBrother, 'i:m:hungry', function() {});\n\n    self.trigger('real nice');\n\n    self.publicMethod = function() {};\n\n    // Initialize and star the app.\n    self.start = function() {\n\n    };\n\n    // Tear down, clean up event listeners and all dom nodes generated by the module.\n    self.stop = function() {\n        self.stopListening();\n    };\n\n    return self;\n\n};\n```\n\n## February 2015\n\nAll parts of the application enter the framework of Marionette.js modules. The heavily used global messaging system decouples modules further. Development goes on in a comfortable pace.\n\n## May 2015\n\nThe public-facing portion of the site moves to Express.js, while the back-end stays on Rails. This provides a significant performance boost. In preparation for the June launch, the codebase is cleaned, gulped, gzipped, and dreamed about over the course of several days.\n\n## June 2015\n\nThe [first interactive map](http://atlas.newamerica.org/mapping-college-readiness) is shown in public at an event, attended also by Delaware's governor. The site behaves glitch-free, and the program is very happy.\n\nWith time on our hands once more, we think about high-level improvements: isomorphic models would simplify data API code, better SEO is needed, Backbone Views are a pain to work with. Luckily, our competent intern Jessica has been making progress prototyping React.js components for the back-end, an endeavour that encouraged us to finally switch technologies.\n\n## July 2015\n\n75% of the site moves away from Backbone Views to React.js components, keeping Marionette.js' global messaging system.\n\n## August 2015\n\nAll Marionette modules move over to React. We learn an important lesson: React encourages more encapsulation, crystal-clear data flow and simpler messaging patterns than Marionette's modules. This is not to say the same is not possible in Marionette, it's just more tempting to take shortcuts that introduce wild couplings, shortcuts of which we discovered a few. The plan becomes to use Marionette more sparingly and only as a global messaging system.\n\nThere is another lesson another step further back: updating technologies - especially to the ones we like - does wonders to code quality. Feeling motivated to keep doing that as frequently as possible.\n\n## September 2015\n\nThe codebase is moved to ES6 code, bundled with Browserify and accessed in a single entry point on the client.\n\nThe back-end is revamped using custom, reusable React form components. Things start to resemble an extractable, single-page CMS.",
    "html": "<p>New America is a vibrant think-tank that is very much interested in technology - and as such, deserves the very best in interactive web tools. I currently lead coding efforts and contribute to design and UX to make this happen.</p>\n\n<p>The beating heart of my work is <a href=\"http://atlas.newamerica.org\">Atlas</a>, a new data visualization and presentation tool. It delivers the Education Policy Program's carefully collected and synthesized data to policymakers, other analysts and the general public in a beautiful, clear, highly interactive format. Its back-end allows policy analysts to create custom interactive maps and charts without coding.</p>\n\n<p>I am using the core codebase from Atlas to develop the <a href=\"http://2014.newamerica.org\">2014 annual report</a>, <a href=\"http://my.newamerica.org\">the New America intranet</a>, while also doing some consultation and front-end bug fixes on the organization's <a href=\"https://www.newamerica.org/\">main site</a> on the side. These are busy, exciting, fun times with a whole lot of learning.</p>\n\n<h1 id=\"technology\">Technology</h1>\n\n<p>Atlas is a native web/single-page application powered by Express.js. It is very close to becoming a fully isomorphic application, with Backbone.js data models and React.js components shared by the client and the server.</p>\n\n<p>Data visualization and interactive mapping components are handled by the very capable d3.js and Leaflet.js. We've figured out some <a href=\"/blog/scaling-tricks-for-geo\">nice ways</a> to integrate these libraries into our client-side codebase.</p>\n\n<h1 id=\"history\">History</h1>\n\n<p>The codebase has come a long way, included a whole lot of fun, learning and intensity. Here are some of the highlights:</p>\n\n<h2 id=\"november2014\">November 2014</h2>\n\n<p>We brainstormed on the scope of the platform and made decisions on the technology stack used for prototyping. Ruby on Rails 4.2, Backbone.js and Marionette.js 2.3 are the winners.</p>\n\n<h2 id=\"december2014\">December 2014</h2>\n\n<p>The home page and the projects listings page is built out as a single-page app using Marionette.js.</p>\n\n<p>An initial <a href=\"http://atlas.newamerica.org/mapping-college-readiness\">heatmap</a> and <a href=\"http://atlas.newamerica.org/tech-early-literacy\">pindrop</a> map templates are built out using vanilla JavaScript modules. The following starts showing up all over the place:</p>\n\n<pre><code>var Atlas.SomeMappingModule = function() {\n\n    var self = {};\n\n    // Add event emitting, handling and listening capabilities.\n    _.extend(self, Backbone.Events);\n\n    var privateMethod = function() {};\n\n    self.listenTo(babyBrother, 'i:m:hungry', function() {});\n\n    self.trigger('real nice');\n\n    self.publicMethod = function() {};\n\n    // Initialize and star the app.\n    self.start = function() {\n\n    };\n\n    // Tear down, clean up event listeners and all dom nodes generated by the module.\n    self.stop = function() {\n        self.stopListening();\n    };\n\n    return self;\n\n};\n</code></pre>\n\n<h2 id=\"february2015\">February 2015</h2>\n\n<p>All parts of the application enter the framework of Marionette.js modules. The heavily used global messaging system decouples modules further. Development goes on in a comfortable pace.</p>\n\n<h2 id=\"may2015\">May 2015</h2>\n\n<p>The public-facing portion of the site moves to Express.js, while the back-end stays on Rails. This provides a significant performance boost. In preparation for the June launch, the codebase is cleaned, gulped, gzipped, and dreamed about over the course of several days.</p>\n\n<h2 id=\"june2015\">June 2015</h2>\n\n<p>The <a href=\"http://atlas.newamerica.org/mapping-college-readiness\">first interactive map</a> is shown in public at an event, attended also by Delaware's governor. The site behaves glitch-free, and the program is very happy.</p>\n\n<p>With time on our hands once more, we think about high-level improvements: isomorphic models would simplify data API code, better SEO is needed, Backbone Views are a pain to work with. Luckily, our competent intern Jessica has been making progress prototyping React.js components for the back-end, an endeavour that encouraged us to finally switch technologies.</p>\n\n<h2 id=\"july2015\">July 2015</h2>\n\n<p>75% of the site moves away from Backbone Views to React.js components, keeping Marionette.js' global messaging system.</p>\n\n<h2 id=\"august2015\">August 2015</h2>\n\n<p>All Marionette modules move over to React. We learn an important lesson: React encourages more encapsulation, crystal-clear data flow and simpler messaging patterns than Marionette's modules. This is not to say the same is not possible in Marionette, it's just more tempting to take shortcuts that introduce wild couplings, shortcuts of which we discovered a few. The plan becomes to use Marionette more sparingly and only as a global messaging system.</p>\n\n<p>There is another lesson another step further back: updating technologies - especially to the ones we like - does wonders to code quality. Feeling motivated to keep doing that as frequently as possible.</p>\n\n<h2 id=\"september2015\">September 2015</h2>\n\n<p>The codebase is moved to ES6 code, bundled with Browserify and accessed in a single entry point on the client.</p>\n\n<p>The back-end is revamped using custom, reusable React form components. Things start to resemble an extractable, single-page CMS.</p>",
    "image": "/images/sky-1200.jpg",
    "featured": false,
    "page": false,
    "status": "published",
    "language": "en_US",
    "meta_title": null,
    "meta_description": null,
    "created_at": "2016-02-21T14:44:16.536Z",
    "created_by": 1,
    "updated_at": "2016-02-22T07:53:41.850Z",
    "updated_by": 1,
    "published_at": "2015-11-21T14:44:00.000Z",
    "published_by": 1,
    "author": 1,
    "url": "/new-america/"
  }]}
}
